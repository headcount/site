#!/usr/bin/env python
import os, sys
import json, md5
import libsite

from operator import getitem

import SoftLayer
from libsite.secret import secret

CACHE = False

class SLAPI:
    @classmethod
    def cachefile(cls, service, method, oid=None, mask=None):
        fN = '/tmp/%s:%s.%s'
        hashed = 'unmasked'
        if mask is not None: hashed = md5.new(mask).hexdigest()[0:len(hashed)]
        fN %= (service, method, hashed)
        if oid is not None: fN += '.%s' % oid
        fN += '.json'

        return fN

    def __init__(self, username, api_key):
        self._client = SoftLayer.API.Client(username, api_key)

    def _cache(self, service, method, data, oid=None, mask=None):
        success = False
        with open(self.cachefile(service, method, oid=oid, mask=mask), 'w') as fH:
            json.dump(data, fH, ensure_ascii=False)
            success = True

        return success

    def retrieve(self, service, method, oid=None, mask=None):
        data = None

        try:
            ctx = getattr(self._client[service], method, None)
            data = ctx(id=oid, mask=mask)
            if data:
                self._cache(service, method, data, oid=oid, mask=mask)
        except SoftLayer.exceptions.MethodNotFound:
            print "Invalid service: Softlayer:%s" % service
        except SoftLayer.exceptions.SoftLayerAPIError, e:
            if e.faultCode == 'Client':
                print "Invalid method: Softlayer:%s:%s" % (service, method)
            else:
                print "Invalid function call: Softlayer:%s:%s(%s)" % (
                    service, method, oid or ''
                )
            print "    %s" % e.faultString

        return data

    def expose(self, service, method, oid=None, mask=None):
        success = False
        cachefile = self.cachefile(service, method, oid=oid, mask=mask)
        if CACHE is False or not os.path.exists(cachefile):
            if self.retrieve(service, method, oid=oid, mask=mask):
                success = True
        else:
            success = True

        if success:
            with open(cachefile, 'r') as fH:
                print(''.join(fH.readlines()))

'''
class SLAPIOLD:
    def console(self):
        ipmiIpAddress = self._oPF['$.networkComponents[0].ipmiIpAddress']
        username = self._oPF['$.operatingSystem.passwords[0].username']
        password = self._oPF['$.operatingSystem.passwords[0].password']
        return 'ipmp://%s:%s@%s/' % (
            username, password, ipmiIpAddress
        )

    def hostinfo(self):
        datacenterName = self._oPF['$.datacenter.name']
        ipAddresses = self._oPF('$.networkComponents.*[@.name is "eth"].primaryIpAddress')
        return '%s@%s' % (','.join([_[1] for _ in ipAddresses]), datacenterName)
'''

import socket
def isValidIPv4(raw):
    try:
        socket.inet_aton(raw)
        return True
    except socket.error:
        return False

import ipaddress
def isValidIPv4PriAddr(raw):
    raw = unicode(raw)
    isit = False
    try:
        ip = ipaddress.ip_address(raw)
        isit = ipaddress.ip_address(raw).is_private
    except ValueError:
        pass

    return isit

if __name__ == '__main__':
    argv = sys.argv[1:]
    argc = len(argv)

    username = 'nima.talebi'
    api_key = secret('SLAPI')
    slapi = SLAPI(username, api_key)

    if argc > 0:
        service = argv[0]
        if service[0] == '@':
            if service == '@ip-pri':
                allPivateAddrs = set()
                method = 'getHardware'
                for x in slapi.retrieve('Account', method):
                    more = [_ for _ in x.values() if type(_) is str and isValidIPv4PriAddr(_)]
                    allPivateAddrs |= set(more)
                for ipv4 in allPivateAddrs:
                    print(ipv4)

            elif service == '@sn-pri':
                allPivateSubnets = set()
                method = 'getPrivateSubnets'
                for x in slapi.retrieve('Account', method):
                    print '%s/%s' % (x['networkIdentifier'], x['cidr'])

            elif service == '@test':
                method = 'getRouters'
                for x in slapi.retrieve('Account', method):
                    fqdn = x['fullyQualifiedDomainName']
                    print socket.gethostbyname('Account', fqdn)
        else:
            service, method = argv[0].split('::')

            mask = None
            oid = None
            for arg in argv[1:]:
                k, v = arg.split('=', 1)
                if k == 'mask':
                    mask = v
                elif k == 'id':
                    oid = int(v)
                else:
                    print("Invalid option `%s'" % k)

            slapi.expose(service, method, oid=oid, mask=mask)
            #sys.stderr.write('xxx 1 xxx\n')
            #sys.stderr.write('xxx 2 xxx\n')
    else:
        om=''
        om = 'networkComponents.primarySubnet'
        hw = slapi._client['Account'].getHardware(mask=om)
        for x in hw:
            for y in x['networkComponents']:
                try:
                    print y['primarySubnet']['gateway'], x['id']
                except:
                    pass
                #print y.get('ipmpIpAddress', None)
        #for i in hw.getObject(mask=om).networkComponents:
        #    print i
