# vim: tw=0:ts=4:sw=4:et:ft=bash

:<<[core:docstring]
Core Unit-Testing Module
[core:docstring]

#. Unit Testing -={
#. Scaffolding -={
moduleScaffold() {
    local -i e=0

    local cl=${1^}
    local module=$2
    cpf "%{@comment:${module}${cl}...}"

    if [ -f ${g_RUNTIME_SCRIPT} ]; then
        if [ $? -eq 0 ]; then
            if [ "$(type -t ${module}${cl} 2>/dev/null)" == "function" ]; then
                ${module}${cl}
                e=$?
                if [ $e -eq 0 ]; then
                    theme HAS_PASSED
                else
                    theme HAS_FAILED
                fi
            else
                theme HAS_WARNED "UNDEFINED:${module}${cl}"
            fi
        else
            theme HAS_FAILED
            e=${CODE_FAILURE}
        fi
    else
        theme HAS_PASSED "DYNAMIC_ONLY"
    fi

    return $e
}

oneTimeSetUp() {
    cpf "%{@comment:unitSetUp...}"
    local -i e=${CODE_SUCCESS}

    declare -gi tid=0

    declare -g oD="${SHUNIT_TMPDIR}"
    mkdir -p "${oD}"

    declare -g stdoutF="${oD}/stdout"
    declare -g stderrF="${oD}/stderr"
    theme HAS_PASSED

    moduleScaffold setUp ${module?}
    e=$?

    return $e
}

oneTimeTearDown() {
    local -i e=${CODE_SUCCESS}

    moduleScaffold tearDown ${module?}
    e=$?

    cpf "%{@comment:unitTearDown...}"
    rm -rf "${oD?}"
    theme HAS_PASSED

    return $e
}

setUp() {
    : ${tid?}
    ((tid++))
    tidstr=$(printf "%03d" ${tid})
    cpf "%{@comment:Test} %{y:#%s} " "${tidstr}"
}

tearDown() {
    :
}
#. }=-
#. Unit-testing coverage test -={
declare -g -A g_MODULES
function testCoverage() {
    local profile=${g_RUNTIME_PROFILE?}
    local module=${g_RUNTIME_MODULE?}
    local script=${g_RUNTIME_SCRIPT?}
    local cwd=${g_RUNTIME_CWD}
    local -i e=0
    local -i t=0
    local -i p=0
    local -i s=0

    local -A fnregexes=(
        [private]='^function ::%s:[a-z0-9_]+\(\)'
        [internal]='^function :%s:[a-z0-9_]+\(\)'
        [public]='^function %s:[a-z0-9_]+\(\)'
    )

    if [ -d ${cwd} ]; then
        cd ${cwd}
        local context
        local blacklisted
        blacklisted="$(awk -F\| "NF==2&&\$1~/^#${profile}$/&&\$2~/^${module}$/{print\"BLACKLISTED\"}" ${SITE_UNIT_DYNAMIC?})"
        if [ "${blacklisted}" != "BLACKLISTED" ]; then
            cpf "%{@profile:${profile}}: %{!module:${module}} %{r:-=[}\n"
            for context in ${!fnregexes[@]}; do
                local regex=$(printf "${fnregexes[${context}]}" ${module})
                local -i count=$(grep -cE "${regex}" ${module})
                cpf "     %{m:${context}}:%{!module:${module}}:%{@int:${count} functions}\n"
                if [ $count -gt 0 ]; then
                    local -a fns=(
                        $(grep -oE "${regex}" ${module}|sed -e "s/^function :\{0,2\}${module}:\(.*\)()/\1/")
                    )
                    for fn in ${fns[@]}; do
                        local utf="test${profile^}${module^}${fn^}${context^}"
                        utf=${utf/:/} #. Remove the colon for shunit2

                        local utf_regex="^test((_[0-9])+_)?${profile^}${module^}${fn^}${context^}$"
                        utf_regex=${utf_regex/:/} #. Remove the colon for shunit2

                        local -i static_tests=$(declare -F|awk '$3~/'${utf_regex}'/{print$3}'|wc -l)
                        if [ ${static_tests} -gt 0 ]; then
                            cpf "      %{@comment:|___} %{!function:${module}:${fn}} %{+bo}%{g:static}%{-bo} %{@fn:${utf}}..."
                            theme HAS_PASSED "Static:${static_tests}"
                        fi

                        cpf "      %{@comment:|___} %{!function:${module}:${fn}} %{g:dynamic}; %{@fn:${utf}}..."
                        blacklisted="$(awk -F\| "\$1~/^#${profile}$/&&\$2~/^${module}$/&&\$3~/^${fn}$/&&\$4~/^${context}$/{print\"BLACKLISTED\"}" ${SITE_UNIT_DYNAMIC?})"
                        if [ "${blacklisted}" != "BLACKLISTED" ]; then
                            local input
                            input="$(awk -F\| "\$1~/^${profile}$/&&\$2~/^${module}$/&&\$3~/^${fn}$/&&\$4~/^${context}$/{print\$0}" ${SITE_UNIT_DYNAMIC?})"
                            if [ -n "${input}" ]; then
                                local -i i=0
                                local line
                                while read line; do
                                    ((i++))
                                    local ffn=
                                    case ${context} in
                                        private)  ffn+=::;;
                                        internal) ffn+=:;;
                                    esac
                                    ffn+=${prefix}${module}:${fn}
                                    if [ "${context}" == "public" ]; then
                                        cat <<!SCRIPT >> ${script}
#. Dynamic function ${i} for ${utf} {no-args} [ site:${profile}:${module}.${fn}() ] -={

function ${utf}Dyn${i}NoArgs() {
    #. Check if the function called without any arguments returns CODE_DEFAULT, or otherwise CODE_SUCCESS
    #. TODO: At the moment, no way to tell automatically if its CODE_DEFAULT or CODE_SUCCESS we expect
    #. TODO: so this either/or approach will have to do.
    core:softimport ${module}
    cpf " %{@comment ___site} %{!function:${module}:${fn}} {no-args} "
    if assertEquals "import ${module}" ${CODE_SUCCESS} \$?; then
        ${ffn} >/dev/null 2>&1
        ((e=\$? % ${CODE_DEFAULT})) #. See why above
        if assertEquals "exit code" ${CODE_SUCCESS} \${e}; then
            theme HAS_PASSED
        else
            theme HAS_FAILED "Expected return code ${CODE_DEFAULT} or ${CODE_SUCCESS}, but not \${e}"
        fi
    fi
}
#. }=-
!SCRIPT
                                    fi
                                    IFS='|' read       \
                                        auto_profile   \
                                        auto_module    \
                                        auto_fn        \
                                        auto_context   \
                                        auto_stdin     \
                                        auto_arguments \
                                        auto_stdout    \
                                        auto_stderr    \
                                        auto_exitcode  \
                                        auto_site      \
                                    <<< "${line}"
                                    cat <<!SCRIPT >> ${script}
#. Dynamic function ${i} for ${utf} [ site:${auto_profile}:${auto_module}.${auto_fn}() ] -={

function ${utf}Dyn${i}() {
    local regex_stdin="${auto_stdin?}";
    local regex_stdout='${auto_stdout?}';
    local regex_stderr='${auto_stderr?}';

    cpf " %{@comment ___site} %{!function:${auto_module}:${auto_fn}} ${auto_arguments//%/%%} %{r:-=[} "
        cpf "%{g:out(}"; echo -ne "\${regex_stdout:--}"; cpf "%{g:)}"; cpf " %{y:/} "
        cpf "%{r:err(}"; echo -ne "\${regex_stderr:--}"; cpf "%{r:)}"; cpf " %{y:/} ";
        [ ${auto_exitcode} -eq 0 ] && cpf "%{g:0}" || cpf "%{r:${auto_exitcode}}"
    cpf " %{r:]=-}"

    if [ -z "${auto_site}" -o "${auto_site}" == "${SITE_PROFILE}" ]; then
        cpf
        core:softimport ${auto_module}
        if assertEquals "import ${auto_module}" ${CODE_SUCCESS} \$?; then
            if assertEquals "function" \$(type -t "${ffn}"); then
                local -i e
                local argv='${auto_arguments}'
                if [ "${auto_context}" == "public" ]; then
                    if [ -z "\${regex_stdin}" ]; then
                        #. We go via the outer core wrapper to ensure user short
                        #. and long options are resovled properly for public functions.
                        core:wrapper ${auto_module} ${auto_fn} \${argv} >\${stdoutF?} 2>\${stderrF?}
                    else
                        echo "\${regex_stdin}" | core:wrapper ${auto_module} ${auto_fn} \${argv} >\${stdoutF?} 2>\${stderrF?}
                        e=\$?
                    fi
                else
                    if [ -z "\${regex_stdin}" ]; then
                        #. No need to worry about such -a|--argument style options
                        #. for non-public function calls as they do not support
                        #. this, only public functions do, so we can call the
                        #. inner functions directly.
                        ${ffn} \${argv} >\${stdoutF?} 2>\${stderrF?}
                    else
                        echo "\${regex_stdin}" | ${ffn} \${argv} >\${stdoutF?} 2>\${stderrF?}
                        e=\$?
                    fi
                fi
                e=\$?

                if assertEquals "exit code" ${auto_exitcode} \$e; then
                    if [ -n "\${regex_stdout?}" ]; then
                        local stdout_ok=0
                        if [ \${#regex_stdout} -eq 32 -a -z "\${regex_stdout//[0-9a-f]/}" ]; then
                            local md5=\$(md5sum \${stdoutF?}|awk '{print\$1}')
                            if [ "\${md5}" == "\${regex_stdout?}" ]; then
                                stdout_ok=1
                            else
                                echo "    \${md5}" vs "\${regex_stdout?}"
                            fi
                        fi
                        if [ \${stdout_ok} -eq 0 ]; then
                            read -r stdout_line <\${stdoutF?}
                            if ! [[ \${stdout_line?} =~ \${regex_stdout} ]]; then
                                assertEquals "\${regex_stdout?}" "\${stdout_line?}"
                            fi
                        fi
                    fi

                    if [ -n "\${regex_stderr}" ]; then
                        local stderr_ok=1
                        if [ \${#regex_stderr} -eq 32 -a -z "\${regex_stderr//[0-9a-f]/}" ]; then
                            local md5=\$(md5sum \${stderrF}|awk '{print\$1}')
                            if [ "\${md5}" == "\${regex_stderr}" ]; then
                                stderr_ok=1
                            else
                                echo "    \${md5}" vs "\${regex_stderr?}"
                            fi
                        fi
                        if [ \${stderr_ok} -eq 0 ]; then
                            read -r stderr_line <\${stderrF?}
                            if ! [[ \${stderr_line?} =~ \${regex_stderr} ]]; then
                                cpf "    %{@warn:WARNING}: Unexpected output to stderr [%{@warn:%s}]\n" "\${auto_stderr}"
                            fi
                        fi
                    fi

                else
                    echo "Exiting early."
                fi
            else
                echo "Exiting early."
            fi
        else
            echo "Exiting early."
        fi
    else
        theme HAS_WARNED "Skipped (${auto_site})"
    fi
}
#. }=-
!SCRIPT
                                done <<< "${input}"
                                theme HAS_PASSED "Dynamic:$i"
                                ((p++))
                            else
                                if [ ${static_tests} -gt 0 ]; then
                                    theme HAS_PASSED "StaticOnly"
                                    ((p++))
                                else
                                    theme HAS_FAILED "Undefined"
                                    ((e++))
                                fi
                            fi
                        else
                            theme HAS_WARNED "Blacklisted"
                            ((s++))
                        fi
                        ((t++))
                    done
                fi
            done
            cpf "%{r:]=-} %{@profile:${profile}}: %{!module:${module}}\n"
        else
            cpf "%{@profile:${profile}}: %{!module:${module}} %{r:-=[} %{@warn:BLACKLISTED} %{r:]=-} %{@profile:${profile}}: %{!module:${module}}\n"
        fi
        cd ${OLDPWD}
    fi

    assertEquals "of the $t unit-tests, $p passed, $s skipped, and $e missing; i.e.," $((t-s)) $p
}
#. }=-
#. Unit-test `site' module function -={

function ::unit:test() {
    declare -g g_MODE

    local -i e=0

    local -A profiles=(
        [core]=${SITE_CORE_MOD}
        [${SITE_PROFILE}]=${SITE_USER_MOD}
    )
    for profile in ${!profiles[@]}; do
        if [ -d ${profiles[${profile}]} ]; then
            cd ${profiles[${profile}]}
            local module script
            for module in *; do
                if [ ${#g_MODULES[@]} -eq 0 -o ${g_MODULES[${module}]--1} -eq 1 ]; then
                    g_MODE="prime"
                    cpf "%{@comment:${profile}.${module}}.%{r:${g_MODE} -=[}\n";
                    (
                        export g_RUNTIME_CWD=${profiles[${profile}]}
                        export g_RUNTIME_PROFILE=${profile}
                        export g_RUNTIME_MODULE=${module}
                        export g_RUNTIME_SCRIPT=${SITE_USER_CACHE?}/unittest-${module}.sh

                        cat <<!SCRIPT > ${g_RUNTIME_SCRIPT}
#!/bin/bash
#. Script    : ${script}
#. Profile   : ${profile}
#. Module    : ${module}
#. Generated : $(date)
!SCRIPT
                        script=${SITE_UNIT_STATIC/static/static-${module}}
                        if [ -r "${script}" ]; then
                            cat "${script}" > ${g_RUNTIME_SCRIPT}
                        fi
                        source ${g_RUNTIME_SCRIPT}
                        SHUNIT_PARENT="${SITE_CORE_MOD}/unit" source ${SHUNIT2}
                    )
                    local -i ep=$?

                    cpf "%{r:]=-} %{@comment:${profile}.${module}}.%{r:${g_MODE}}...";
                    if [ ${ep} -eq 0 ]; then
                        theme HAS_PASSED
                    else
                        theme HAS_FAILED
                        let e++
                    fi
                    cpf "%{@comment:#############################################################################}\n"

                    g_MODE="execute"
                    cpf "%{@comment:${profile}.${module}}.%{r:${g_MODE} -=[}\n";
                    script=${SITE_USER_CACHE?}/unittest-${module}.sh
                    local -i ee=-1
                    if [ -r "${script}" ]; then
                        (
                            export g_RUNTIME_SCRIPT="${script}"
                            source "${script}"
                            SHUNIT_PARENT="${script}" source "${SHUNIT2}"
                        )
                        ee=$?
                    fi
                    cpf "%{r:]=-} %{@comment:${profile}.${module}}.%{r:${g_MODE}}...";
                    if [ ${ee} -eq 0 ]; then
                        theme HAS_PASSED
                    elif [ ${ee} -eq -1 ]; then
                        theme HAS_WARNED "SKIPPED"
                    else
                        theme HAS_FAILED
                        let e++
                    fi
                    cpf "%{@comment:#############################################################################}\n"
                fi
            done
        fi
    done

    return $e
}

function unit:test:usage() { echo "[<module> [<module> [...]]]"; }
function unit:test() {
    local -i e=${CODE_DEFAULT?}
    local valid=1

    local module
    if [ $# -gt 0 ]; then
        for module in ${@}; do
            if core:softimport ${module}; then
                g_MODULES[${module}]=1
            else
                g_MODULES[${module}]=0
                valid=0
            fi
        done
    fi

    if [ ${valid} -eq 1 ]; then
        if [ -e "${SHUNIT2}" ]; then
            cpf "%{@comment:#############################################################################}\n"
            #. Only regenerate the script if it doesn't exist, or if it is
            #. older than the input unittest csv file.
            ::unit:test
            local -i e=$?

            cpf "Unit-testing overal result..."
            [ $e -eq 0 ] && theme HAS_PASSED || theme HAS_FAILED
        else
            theme ERR_USAGE "${SHUNIT2} is missing"
            e=${CODE_FAILURE}
        fi
    else
        e=${CODE_FAILURE}
    fi

    return $e
}
#. }=-
#. }=-
