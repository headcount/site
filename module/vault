# vim: tw=0:ts=4:sw=4:et:ft=bash

:<<[core:docstring]
Core vault and secrets module
[core:docstring]

#. The Vault -={

core:import gpg

core:requires pwgen
core:requires shred
core:requires xclip

g_VAULT=${SITE_USER_ETC}/site.vault
g_VAULT_TMP=${SITE_USER_TMP}/vault.killme
g_VAULT_TS=${SITE_USER_TMP}/vault.timestamp
g_VAULT_BU=${SITE_USER_TMP}/vault.$(date +'%Y%m%d')

#. private -={
#function ::vault:draw() {
#    ${HOME}/bin/gpg2png $1
#    cp $1.png ~/vault.png
#    cp $1-qr.png ~/g_VAULT-QR.PNG
#    img2txt ~/vault.png ~/g_VAULT-QR.PNG
#}

function ::vault:clean() {
    test ! -f ${g_VAULT} || chmod 600 ${g_VAULT}
    test ! -f ${g_VAULT_BU} || chmod 400 ${g_VAULT_BU}
    test ! -f ${g_VAULT_TMP} || shred -fuz ${g_VAULT_TMP}
    test ! -f ${g_VAULT_TS} || shred -fuz ${g_VAULT_TS}
}
#. DEPRECATED
#function ::vault:secrets() {
#    local -i e=${CODE_FAILURE}
#
#    if [ $# -eq 1 ]; then
#        ${SITE_CORE_LIBEXEC}/secret $1
#        e=$?
#    else
#        core:raise EXCEPTION_BAD_FN_CALL
#    fi
#
#    return $e
#}
#. }=-

#. create -={
function :vault:create() {
    local -i e=${CODE_FAILURE}

    if [ $# -eq 1 ]; then
        local vault=$1
        if [ ! -f ${vault} ]; then
            local -i pwid=0
            while read pw; do
                let pwid++
                echo MY_SECRET_${pwid}    ${pw}
            done <<< "$(pwgen 64 7)" | :gpg:encrypt - ${vault}
            e=$?
        fi
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi

    return $e
}

function vault:create:usage() { echo "[<vault-path:~/.secrets>]"; }
function vault:create() {
    local -i e=${CODE_DEFAULT}

    if [ $# -le 1 ]; then
        cpf "Generating blank secrets file..."
        local vault=${1:-${g_VAULT}}
        if [ ! -f ${vault} ]; then
            :vault:create ${vault}
            e=$?
            if [ $e -eq ${CODE_SUCCESS} ]; then
                theme HAS_PASSED ${vault}
            else
                theme HAS_FAILED ${vault}
            fi
        else
            e=${CODE_FAILURE}
            theme HAS_FAILED "${vault} exists"
        fi
    fi

    return $e
}
#. }=-
#. list -={
function :vault:list() {
    local -i e=${CODE_FAILURE}

    if [ $# -eq 1 ]; then
        local vault="$1"
        local -a secrets
        if [ -r ${vault} ]; then
            secrets=(
                $(
                    :gpg:decrypt ${vault} - | awk '$1!~/^[\t ]*#/{print$1}';
                    exit ${PIPESTATUS[0]}
                )
            )
            e=$?
            [ $e -ne 0 ] || echo "${secrets[@]}"
        else
            e=9
        fi
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi

    return $e
}

function vault:list:usage() { echo "<mandatory> [<optional:default>]"; }
function vault:list() {
    local -i e=${CODE_DEFAULT}

    if [ $# -le 1 ]; then
        cpf "Inspecting vault..."
        local vault=${1:-${g_VAULT}}
        local -a secrets
        secrets=( $(:vault:list ${vault}) )
        e=$?
        if [ $e -eq ${CODE_SUCCESS} ]; then
            theme HAS_PASSED ${vault}

            local secret
            for secret in ${secrets[@]}; do
                cpf " * %{r:%s}\n" ${secret}
            done
        elif [ $e -eq 9 ]; then
            theme HAS_FAILED "MISSING:${vault}"
        else
            theme HAS_FAILED "CANNOT_DECRYPT:${vault}"
        fi
    fi

    return $e
}
#. }=-
#. edit -={
function vault:edit:usage() { echo "[<vault>]"; }
function vault:edit() {
    local -i e=${CODE_DEFAULT}

    if [ $# -eq 0 -o $# -eq 1 ]; then
        local vault="${1:-${g_VAULT}}"
        mkdir -p $(dirname ${g_VAULT_TMP})

        :gpg:decrypt ${g_VAULT} ${g_VAULT_TMP}
        e=$?
        if [ $e -eq 0 ]; then
            touch ${g_VAULT_TS}
            ${EDITOR:-vim} -n ${g_VAULT_TMP}
            if [ ${g_VAULT_TMP} -nt ${g_VAULT_TS} ]; then
                cpf "Encrypting secrets..."
                #::vault:draw ${g_VAULT_TMP}
                mv --force ${g_VAULT} ${g_VAULT_BU}
                :gpg:encrypt ${g_VAULT_TMP} ${g_VAULT}
                e=$?
                theme HAS_AUTOED $e
            fi
        fi

        cpf "Shredding remains..."
        ::vault:clean
        theme HAS_AUTOED $e
    fi

    return $e
}

#. }=-
#. read -={
function :vault:read() {
    local -i e=${CODE_FAILURE}

    local vault="${g_VAULT}"
    local sid
    if [ $# -eq 1 ]; then
        sid="$1"
    elif [ $# -eq 2 ]; then
        vault="$1"
        sid="$2"
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi

    :gpg:decrypt "${vault}" - |
        awk 'BEGIN{e=1};$1~/^\<'${sid}'\>/{print$2;e=0};END{exit(e)}'
    e=$?

    return $e
}

function vault:read:usage() { echo "<secret-id> [<vault>]"; }
function vault:read() {
    local -i e=${CODE_DEFAULT}

    if [ $# -eq 1 -o $# -eq 2 ]; then
        local secret="${1}"
        local vault="${2:-${g_VAULT}}"

        [ ! -t 1 ] || cpf "Checking for secret id %{r:%s}..." "${secret}"

        local -a secrets
        secrets=$(:vault:read "${vault}" "${secret}")
        e=$?

        if [ $e -eq 0 -a ${#secrets[@]} -eq 1 ]; then
            if [ -t 1 ]; then
                printf "${secrets[0]}" | xclip -i
                theme HAS_PASSED "COPIED_TO_CLIPBOARD"
            else
                printf "${secrets[0]}"
            fi
        else
            theme HAS_FAILED "NO_SUCH_SECRET_ID"
        fi

    fi

    return $e
}
#. }=-
#. }=-
